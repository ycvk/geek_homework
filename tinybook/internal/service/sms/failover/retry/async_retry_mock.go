// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/sms/failover/retry/retry_task.go
//
// Generated by this command:
//
//	mockgen -source=internal/service/sms/failover/retry/retry_task.go -package=retry -destination=internal/service/sms/failover/retry/async_retry_mock.go
//
// Package retry is a generated GoMock package.
package retry

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAsyncRetry is a mock of AsyncRetry interface.
type MockAsyncRetry struct {
	ctrl     *gomock.Controller
	recorder *MockAsyncRetryMockRecorder
}

// MockAsyncRetryMockRecorder is the mock recorder for MockAsyncRetry.
type MockAsyncRetryMockRecorder struct {
	mock *MockAsyncRetry
}

// NewMockAsyncRetry creates a new mock instance.
func NewMockAsyncRetry(ctrl *gomock.Controller) *MockAsyncRetry {
	mock := &MockAsyncRetry{ctrl: ctrl}
	mock.recorder = &MockAsyncRetryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAsyncRetry) EXPECT() *MockAsyncRetryMockRecorder {
	return m.recorder
}

// StartRetryLoop mocks base method.
func (m *MockAsyncRetry) StartRetryLoop(task Task) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartRetryLoop", task)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartRetryLoop indicates an expected call of StartRetryLoop.
func (mr *MockAsyncRetryMockRecorder) StartRetryLoop(task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartRetryLoop", reflect.TypeOf((*MockAsyncRetry)(nil).StartRetryLoop), task)
}
