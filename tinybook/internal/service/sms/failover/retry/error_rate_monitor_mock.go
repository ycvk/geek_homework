// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/sms/failover/retry/error_rate_monitor.go
//
// Generated by this command:
//
//	mockgen -source=internal/service/sms/failover/retry/error_rate_monitor.go -package=retry -destination=internal/service/sms/failover/retry/error_rate_monitor_mock.go
//
// Package retry is a generated GoMock package.
package retry

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockErrorMonitor is a mock of ErrorMonitor interface.
type MockErrorMonitor struct {
	ctrl     *gomock.Controller
	recorder *MockErrorMonitorMockRecorder
}

// MockErrorMonitorMockRecorder is the mock recorder for MockErrorMonitor.
type MockErrorMonitorMockRecorder struct {
	mock *MockErrorMonitor
}

// NewMockErrorMonitor creates a new mock instance.
func NewMockErrorMonitor(ctrl *gomock.Controller) *MockErrorMonitor {
	mock := &MockErrorMonitor{ctrl: ctrl}
	mock.recorder = &MockErrorMonitorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockErrorMonitor) EXPECT() *MockErrorMonitorMockRecorder {
	return m.recorder
}

// CheckErrorRate mocks base method.
func (m *MockErrorMonitor) CheckErrorRate() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckErrorRate")
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckErrorRate indicates an expected call of CheckErrorRate.
func (mr *MockErrorMonitorMockRecorder) CheckErrorRate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckErrorRate", reflect.TypeOf((*MockErrorMonitor)(nil).CheckErrorRate))
}

// RecordResult mocks base method.
func (m *MockErrorMonitor) RecordResult(success bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordResult", success)
}

// RecordResult indicates an expected call of RecordResult.
func (mr *MockErrorMonitorMockRecorder) RecordResult(success any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordResult", reflect.TypeOf((*MockErrorMonitor)(nil).RecordResult), success)
}
