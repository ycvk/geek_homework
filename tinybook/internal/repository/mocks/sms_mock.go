// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/sms.go
//
// Generated by this command:
//
//	mockgen -source=internal/repository/sms.go -package=repomocks -destination=internal/repository/mocks/sms_mock.go
//
// Package repomocks is a generated GoMock package.
package repomocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSMSRepository is a mock of SMSRepository interface.
type MockSMSRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSMSRepositoryMockRecorder
}

// MockSMSRepositoryMockRecorder is the mock recorder for MockSMSRepository.
type MockSMSRepositoryMockRecorder struct {
	mock *MockSMSRepository
}

// NewMockSMSRepository creates a new mock instance.
func NewMockSMSRepository(ctrl *gomock.Controller) *MockSMSRepository {
	mock := &MockSMSRepository{ctrl: ctrl}
	mock.recorder = &MockSMSRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSMSRepository) EXPECT() *MockSMSRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockSMSRepository) Delete(ctx context.Context, tplId string, args []string, numbers ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, tplId, args}
	for _, a := range numbers {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSMSRepositoryMockRecorder) Delete(ctx, tplId, args any, numbers ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, tplId, args}, numbers...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSMSRepository)(nil).Delete), varargs...)
}

// Save mocks base method.
func (m *MockSMSRepository) Save(ctx context.Context, tplId string, args []string, numbers ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, tplId, args}
	for _, a := range numbers {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Save", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockSMSRepositoryMockRecorder) Save(ctx, tplId, args any, numbers ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, tplId, args}, numbers...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockSMSRepository)(nil).Save), varargs...)
}
